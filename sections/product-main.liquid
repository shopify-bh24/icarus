<style>
  {% if settings.image-switches == 'black' %}
  .cursor-right {
    cursor: url('{{ 'arrow-right.svg' | asset_url | image_url: '32x32' }}'), auto;
  }
  .cursor-left {
    cursor: url('{{ 'arrow-left.svg' | asset_url | image_url: '32x32' }}'), auto;
  }
  {% elsif settings.image-switches == 'white' %}
  .cursor-right {
    cursor: url('{{ 'arrow-right-white.svg' | asset_url | image_url: '32x32' }}'), auto;
  }
  .cursor-left {
    cursor: url('{{ 'arrow-left-white.svg' | asset_url | image_url: '32x32' }}'), auto;
  }
  {% endif %}
  .figureImg {
    display: flex;
    align-items: center;
    overflow: hidden;
  }
  .product__item-img, .product__item-video {
    min-width: 100%;
    height: auto;
    padding: 1px;
  }
  .image-navigation{
    display: none;
  }
  {% if product.images.size < 2 %}
    .product__item-img {
      cursor: inherit;
  }
  {% endif %}

  @media screen and (max-width: 749px){
  .image-navigation {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 5px;
    margin-bottom: 1.5rem;
  }

  .nav-arrow {
    cursor: pointer;
    padding: 10px 0;
    font-size: 20px;
  }

  .nav-dots {
    display: flex;
    gap: 5px;
  }

  .nav-dot {
    width: 10px;
    height: 10px;
    background-color: {{ settings.product_dot_bg }};
    border: 1px solid {{ settings.product_dot_active }};
    border-radius: 50%;
    cursor: pointer;
  }

  .nav-dot.active {
    background-color: {{ settings.product_dot_active }};
  }
  .nav-arrow img {
      width: 20px;
      height: 20px;
      display: block;
      margin: 0px 15px;
  }
  .figureImg {
      width: 100% !important;
      {% if product.images.size > 1 %}
      padding-bottom: 0rem !important;
      {% else %}
      padding-bottom: 1.5rem !important;
      {% endif %}
  }
  }
  #AddToCartForm{
    width: 100%;
  }
  .product-table{
    max-width: 100%;
    overflow: scroll;
  }

  @media screen and (min-width: 749px){
    .product-info {
      margin-top: 0 !important;
  }
    .figureImg {
      position: relative;
  }
    .product__item-img, .product__item-video {
      max-height: 100%;
      max-width: 100%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      min-width: inherit !important;
      {% unless product.images.size == 1 %}
      opacity: 0;
      {% endunless %}
    }

    .product__item-img.active, .product__item-video.active {
      opacity: 1;
    }
    .product__item-video{
      z-index: -1;
    }
    .product__item-img{
      z-index: 1;
    }
  }
</style>

<div class="page-width">
  <div class="product-info">
    {% assign current_variant = product.selected_or_first_available_variant %}
    {% assign featured_image = current_variant.featured_image | default: product.featured_image %}

    <div class="product-info__pc">
      <h2 class="product-info__title product-info__title-top">{{ product.title }}</h2>

        {%  render 'accordion' %}


    </div>

    <div class="figureImg fade-in" id="gallery">
      {% for image in product.images %}
        <img class="product__item-img" src="{{ image | img_url: 'master' }}" alt="{{ image.alt | escape }}">
      {% endfor %}

      {% for media in product.media %}
        {% if media.media_type == 'video' %}
          <video class="product__item-video" controls>
            <source
              src="{{ media | video_tag: controls: true }}"
              </video
            >
        {% endif %}
      {% endfor %}
    </div>

    {% if product.images.size > 1 or product.media.size > 1 %}
      <div class="image-navigation" id="image-navigation">
        <span class="nav-arrow mobile-cursor-left" id="prev-arrow">
          <img
            src="
                        {% if settings.image-switches == 'black' %}{{ 'arrow-left.svg' | asset_url | image_url: '32x32' }} {% elsif settings.image-switches == 'white' %}{{ 'arrow-left-white.svg' | asset_url | image_url: '32x32' }} {% endif %}
            "
          >
        </span>
        <div class="nav-dots" id="nav-dots"></div>
        <span class="nav-arrow mobile-cursor-right" id="next-arrow">
          <img
            src="
                        {% if settings.image-switches == 'black' %}{{ 'arrow-right.svg' | asset_url | image_url: '32x32' }} {% elsif settings.image-switches == 'white' %}{{ 'arrow-right-white.svg' | asset_url | image_url: '32x32' }} {% endif %}
            "
          >
        </span>
      </div>
    {% endif %}

    <div class="product-info__main">
      <form action="/cart/add" method="post" enctype="multipart/form-data" id="AddToCartForm">
        <input type="hidden" name="id" value="{{ current_variant.id }}">

        <div class="product-info__parent">
          <div class="product-info__form">
            {% for block in section.blocks %}
              {% case block.type %}
                {%- when '@app' -%}
                  {%- render block -%}
                {% when 'variant-selector' %}
                  {% if product.variants.size > 1 %}
                    {% for option in product.options_with_values %}
                      <div class="product-options">
                        <div class="option-values">
                          {% for value in option.values %}
                            <button
                              type="button"
                              class="option-value"
                              data-option="{{ option.position }}"
                              data-value="{{ value | escape }}"
                            >
                              {{ value }}
                            </button>
                          {% endfor %}
                        </div>
                      </div>
                    {% endfor %}
                  {% endif %}
                {% when 'buy-buttons' %}
                  {% if current_variant.available %}
                    <button class="product-info__cart-btn button" type="submit">
                      ADD TO CART — {{ current_variant.price | money }}
                    </button>
                  {% else %}
                    <button class="product-info__cart-btn button" id="soldout" type="button" disabled>Sold Out</button>
                  {% endif %}
                  {% if block.settings.enable_dynamic_checkout %}
                    {%- form 'product', product -%}
                      {{ form | payment_button }}
                    {% endform %}
                  {% endif %}
                {% when 'content' %}
                  <div class="product-block-content">
                    <p>{{- block.settings.content -}}</p>
                  </div>
              {% endcase %}
            {% endfor %}
          </div>
        </div>

        {% comment %} <div class="product-info__description-mobile">{{ product.description }}</div> {% endcomment %}
      </form>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const gallery = document.getElementById('gallery');
  const items = gallery.querySelectorAll('.product__item-img, .product__item-video');
  const prevArrow = document.getElementById('prev-arrow');
  const nextArrow = document.getElementById('next-arrow');
  const navDotsContainer = document.getElementById('nav-dots');
  let currentIndex = 0;

  const productVariants = {{ product.variants | json }};
  let currentVariant = {{ product.selected_or_first_available_variant | json }};
  
  function scrollToVariantMedia(selectedVariant) {
    const variantImage = selectedVariant.featured_image;
    if (variantImage) {
      const variantMediaIndex = [...items].findIndex(item => item.tagName === 'IMG' && item.src.includes(variantImage.src));

      if (variantMediaIndex !== -1 && variantMediaIndex !== currentIndex) {
        currentIndex = variantMediaIndex;
        updateMediaPosition();
      }
    }
  }

function updateMediaPosition() {
  if (items.length > 1) {
    if (window.matchMedia('(min-width: 749px)').matches) {
      items.forEach((item, index) => {
        if (index === currentIndex) {
          item.classList.add('active'); 
          item.classList.add('fade-in'); 
          setTimeout(() => {
            item.classList.remove('fade-in'); 
          }, 300);

          if (item.tagName === 'VIDEO') {
            item.play(); 
          }
        } else {
          item.classList.remove('active'); 
          if (item.tagName === 'VIDEO') {
            item.pause(); 
            item.currentTime = 0; 
          }
        }
      });
      updateCursor(items[currentIndex]);
    } else {
      const offset = currentIndex * -100;
      items.forEach(item => {
        item.style.transform = `translateX(${offset}%)`;
        item.style.transition = isTouchDevice() ? 'transform 0.25s ease' : 'none';
      });
      if (!isTouchDevice()) {
        items[currentIndex].classList.add('fade-in');
        setTimeout(() => {
          items[currentIndex].classList.remove('fade-in');
        }, 300);
      }
      updateCursor(items[currentIndex]);
    }
    updateDots();
  } else if (items.length === 1) {
    items[0].classList.add('active');
    items[0].classList.add('fade-in'); 
    setTimeout(() => {
      items[0].classList.remove('fade-in'); 
    }, 300);

    if (items[0].tagName === 'VIDEO') {
      items[0].play(); 
    }
  }
}

  function updateDots() {
    const dots = navDotsContainer.querySelectorAll('.nav-dot');
    dots.forEach((dot, index) => {
      dot.classList.toggle('active', index === currentIndex);
    });
  }

  function createDots() {
    items.forEach((item, index) => {
      const dot = document.createElement('div');
      dot.classList.add('nav-dot');
      if (index === currentIndex) {
        dot.classList.add('active');
      }
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateMediaPosition();
      });
      navDotsContainer.appendChild(dot);
    });
  }

  function handleSwipe(direction) {
    if (direction === 'left') {
      currentIndex = (currentIndex + 1) % items.length;
    } else if (direction === 'right') {
      currentIndex = (currentIndex - 1 + items.length) % items.length;
    }
    updateMediaPosition();
  }

  function handleArrowClick(direction) {
    if (direction === 'left') {
      currentIndex = (currentIndex - 1 + items.length) % items.length;
    } else if (direction === 'right') {
      currentIndex = (currentIndex + 1) % items.length;
    }
    updateMediaPosition();
  }

  prevArrow.addEventListener('click', () => handleArrowClick('left'));
  nextArrow.addEventListener('click', () => handleArrowClick('right'));

  function isTouchDevice() {
    return ('ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0);
  }

  gallery.addEventListener('click', function(event) {
    if (!isTouchDevice()) {
      const x = event.clientX - gallery.getBoundingClientRect().left;
      const totalWidth = gallery.offsetWidth;
      const direction = x < totalWidth / 2 ? 'right' : 'left';
      handleSwipe(direction);
    }
  });

  if (isTouchDevice()) {
    let touchstartX = 0;
    let touchendX = 0;
    gallery.addEventListener('touchstart', function(evt) {
      touchstartX = evt.touches[0].clientX;
    }, false);

    gallery.addEventListener('touchmove', function(evt) {
      touchendX = evt.touches[0].clientX;
    }, false);

    gallery.addEventListener('touchend', function(evt) {
      if (touchendX < touchstartX - 50) {
        handleSwipe('left');
      } else if (touchendX > touchstartX + 50) {
        handleSwipe('right');
      }
    }, false);
  }

  createDots();
  updateMediaPosition();

  items.forEach((item) => {
    item.addEventListener('mousemove', function(event) {
      updateCursor(this);
    });
  });

  function updateCursor(itemElement) {
    if (items.length > 1) {
      const rect = itemElement.getBoundingClientRect();
      const x = event.clientX - rect.left;
      if (x < rect.width / 2) {
        itemElement.style.cursor = "url('{% if settings.image-switches == 'black' %}{{ 'arrow-left.svg' | asset_url | image_url: '32x32' }} {% elsif settings.image-switches == 'white' %}{{ 'arrow-left-white.svg' | asset_url | image_url: '32x32' }} {% endif %}'), auto";
      } else {
        itemElement.style.cursor = "url('{% if settings.image-switches == 'black' %}{{ 'arrow-right.svg' | asset_url | image_url: '32x32' }} {% elsif settings.image-switches == 'white' %}{{ 'arrow-right-white.svg' | asset_url | image_url: '32x32' }} {% endif %}'), auto";
      }
    } else {
      itemElement.style.cursor = "auto";
    }
  }

  const variantButtons = document.querySelectorAll('.option-value');
  let selectedColor = null; 

  variantButtons.forEach(button => {
    button.addEventListener('click', function() {
      const selectedOption = this.getAttribute('data-option');
      const selectedValue = this.getAttribute('data-value');

      if (selectedOption === '2') {  
        selectedColor = selectedValue;
        
        const selectedVariant = productVariants.find(variant => variant.options[1] === selectedColor);
        
        if (selectedVariant) {
          scrollToVariantMedia(selectedVariant);
        }
      }
    });
  });

  updateMediaPosition();

});
</script>
<script>
  document.querySelectorAll('table').forEach(function (table) {
    var wrapper = document.createElement('div');
    wrapper.classList.add('product-table');

    table.parentNode.insertBefore(wrapper, table);

    wrapper.appendChild(table);
  });
</script>
<script>
  document.addEventListener('DOMContentLoaded', function () {
    function setProductInfoHeight() {
      if (window.matchMedia('(min-width: 749px)').matches) {
        var header = document.getElementById('shopify-section-header');
        var productInfo = document.querySelector('.product-info');

        if (header && productInfo) {
          var headerHeight = header.offsetHeight;

          productInfo.style.height = `calc(95vh - ${headerHeight}px)`;
        }
      } else {
        var productInfo = document.querySelector('.product-info');
        if (productInfo) {
          productInfo.style.height = '';
        }
      }
    }

    setProductInfoHeight();

    window.addEventListener('resize', setProductInfoHeight);
  });
</script>

{% schema %}
{
  "name": "Product Page",
  "settings": [],
  "blocks": [
    {
      "type": "accordion",
      "name": "Accordion Item",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "default": "Accordion Title"
        },
        {
          "type": "richtext",
          "id": "content",
          "label": "Content",
          "default": "<p>Accordion content goes here.</p>"
        },
        {
          "type": "text",
          "id": "icon",
          "label": "Icon (Emoji or Unicode)",
          "default": "⭐"
        }
      ]
    },
    {
      "type": "content",
      "name": "Content",
      "settings": [
        {
          "type": "text",
          "id": "content",
          "label": "Content",
          "default": "*CONTENT HERE*"
        }
      ]
    },
    {
      "type": "item-type",
      "name": "Item Type",
      "limit": 1,
      "settings": [
        {
          "type": "paragraph",
          "content": "Select whether this is Pre-made or Pre-order. Will be displayed below the product name"
        },
        {
          "type": "select",
          "id": "item-type",
          "label": "Content",
          "options": [
            {
              "label": "Pre-made",
              "value": "pre-made"
            },
            {
              "label": "Pre-order",
              "value": "pre-order"
            }
          ]
        }
      ]
    },
    {
      "type": "@app"
    },
    {
      "type": "variant-selector",
      "name": "Variant Selector",
      "limit": 1
    },
    {
      "type": "buy-buttons",
      "name": "Buy Buttons",
      "limit": 1,
      "settings": [
        {
          "type": "checkbox",
          "id": "enable_dynamic_checkout",
          "label": "Show dynamic checkout buttons",
          "info": "Using the payment methods available on your store, customers see their preferred option, like PayPal or Apple Pay."
        }
      ]
    }
  ]
}
{% endschema %}
